/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.w9580029.oop.stockcontrollappui;

import com.w9580029.oop.stockcontrollapp.BBStockItem;
import com.w9580029.oop.stockcontrollapp.FileProcess;
import com.w9580029.oop.stockcontrollapp.MMStockItem;
import com.w9580029.oop.stockcontrollapp.StockItemController;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author W9580029
 */
public class StockControllAppDashboard extends javax.swing.JFrame {

    /**
     * Creates new form StockControllAppDashboard
     */
    FileProcess fp = new FileProcess();
    BBStockItem bbsi = new BBStockItem();
    MMStockItem mmsi = new MMStockItem();
    StockItemController controller = new StockItemController();
    private static HashMap<Integer, BBStockItem> bbStockMap = new HashMap<>();
    private static HashMap<Integer, MMStockItem> mmStockMap = new HashMap<>();
    String[] colNames = {"Code", "Title", "Description", "Unit Price", "Quantity"};

    String errorMsgStr = "";

    public String getErrorMsgStr() {
        return errorMsgStr;
    }

    public void setErrorMsgStr(String errorMsgStr) {
        this.errorMsgStr = errorMsgStr;
    }

    public StockControllAppDashboard() {
        initComponents();
        showGui();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        searchJTextField = new javax.swing.JTextField();
        searchJButton = new javax.swing.JButton();
        resetJButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        proCodeJTextField = new javax.swing.JTextField();
        proTitleJTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        proQuantityJTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        proPriceJTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productDescJTextArea = new javax.swing.JTextArea();
        AddProjButton = new javax.swing.JButton();
        UpdateProJButton = new javax.swing.JButton();
        SellProJButton = new javax.swing.JButton();
        ClearJButton = new javax.swing.JButton();
        deleteJButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        StockTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Stock Control App");
        setBackground(new java.awt.Color(255, 255, 255));
        setLocation(new java.awt.Point(200, 200));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        searchJTextField.setToolTipText("Enter the product code to search the product");
        searchJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchJTextFieldActionPerformed(evt);
            }
        });

        searchJButton.setText("Search");
        searchJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchJButtonActionPerformed(evt);
            }
        });

        resetJButton.setText("Reset");
        resetJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetJButton)
                .addContainerGap(752, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchJButton)
                    .addComponent(resetJButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Product Code :");

        jLabel2.setText("Product Title :");

        jLabel3.setText("Product Description :");

        jLabel4.setText("Product Quantity :");

        jLabel5.setText("Product Unit Price :");

        productDescJTextArea.setColumns(20);
        productDescJTextArea.setRows(5);
        jScrollPane1.setViewportView(productDescJTextArea);

        AddProjButton.setForeground(new java.awt.Color(0, 51, 255));
        AddProjButton.setText("Add");
        AddProjButton.setToolTipText("Add new product to the stock.");
        AddProjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddProjButtonActionPerformed(evt);
            }
        });

        UpdateProJButton.setForeground(new java.awt.Color(0, 51, 255));
        UpdateProJButton.setText("Update");
        UpdateProJButton.setToolTipText("Update the stock description/quantity/price");
        UpdateProJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateProJButtonActionPerformed(evt);
            }
        });

        SellProJButton.setForeground(new java.awt.Color(0, 51, 255));
        SellProJButton.setText("Sell");
        SellProJButton.setToolTipText("Select any stock item from the table and enter the quantiy to sell");
        SellProJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellProJButtonActionPerformed(evt);
            }
        });

        ClearJButton.setForeground(new java.awt.Color(0, 51, 255));
        ClearJButton.setText("Clear");
        ClearJButton.setToolTipText("Clears all the feilds releated to the product");
        ClearJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearJButtonActionPerformed(evt);
            }
        });

        deleteJButton.setForeground(new java.awt.Color(255, 0, 51));
        deleteJButton.setText("Delete");
        deleteJButton.setToolTipText("Delete the selected stock.");
        deleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1)
                                    .addComponent(proQuantityJTextField)
                                    .addComponent(proPriceJTextField)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(proCodeJTextField))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(proTitleJTextField)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(AddProjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UpdateProJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SellProJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ClearJButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(proCodeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(proTitleJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proQuantityJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proPriceJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddProjButton)
                    .addComponent(UpdateProJButton)
                    .addComponent(SellProJButton)
                    .addComponent(ClearJButton)
                    .addComponent(deleteJButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        StockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        StockTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StockTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(StockTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchJTextFieldActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_searchJTextFieldActionPerformed

    private void resetJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetJButtonActionPerformed
        // TODO add your handling code here:
        searchJTextField.setText("");
        loadStockTable();
    }//GEN-LAST:event_resetJButtonActionPerformed

    private void StockTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StockTableMouseClicked
        // TODO add your handling code here:
        JTable source = (JTable) evt.getSource();
        int row = source.rowAtPoint(evt.getPoint());
        int column = source.columnAtPoint(evt.getPoint());
        //gets the code of the stock for seleted row
        String selectedStcokCode = source.getModel().getValueAt(row, 0) + "";
        bbStockMap = bbsi.getBbStockMap();

        try {
            for (Map.Entry< Integer, BBStockItem> entry : bbStockMap.entrySet()) {

                String prodCode = entry.getValue().getProdCode();
                //locate the excat product and then set the values in text fields
                if (prodCode.equalsIgnoreCase(selectedStcokCode.trim())) {
                    proCodeJTextField.setText(entry.getValue().getProdCode());
                    proTitleJTextField.setText(entry.getValue().getProdTitle());
                    productDescJTextArea.setText(entry.getValue().getProdDescription());
                    proPriceJTextField.setText(String.valueOf(entry.getValue().getUnitPrice()));
                    proQuantityJTextField.setText(String.valueOf(entry.getValue().getQuantity()));
                    break;
                }

            }

        } catch (Exception e) {
            System.out.print(e);
        }
    }//GEN-LAST:event_StockTableMouseClicked

    private void searchJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchJButtonActionPerformed
        // TODO add your handling code here:
        String searchText = searchJTextField.getText();
        if(searchText.isEmpty()){
        JOptionPane.showMessageDialog(null, "Opps!\nPlease enter a product code to search.");
        }
        else {
            
            bbStockMap = bbsi.getBbStockMap();
            int row_counter = 0;

            try {
                //loop to get the row counter
                for (Map.Entry< Integer, BBStockItem> entry : bbStockMap.entrySet()) {
                    String prodCode = entry.getValue().getProdCode();
                    //locate the excat product and then set the values in text fields
                    if (prodCode.toLowerCase().contains(searchText.trim().toLowerCase())) {
                        row_counter++;
                    }

                }
                if (row_counter > 0) {
                    int index = 0;
                    Object[][] tableData = new Object[row_counter][colNames.length];
                    for (Map.Entry< Integer, BBStockItem> entry : bbStockMap.entrySet()) {

                        String prodCode = entry.getValue().getProdCode();
                        if (prodCode.toLowerCase().contains(searchText.trim().toLowerCase())) {
                            tableData[index][0] = entry.getValue().getProdCode();
                            tableData[index][1] = entry.getValue().getProdTitle();
                            tableData[index][2] = entry.getValue().getProdDescription();
                            tableData[index][3] = entry.getValue().getUnitPrice();
                            tableData[index][4] = entry.getValue().getQuantity();
                            index++;
                        }
                    }

                    StockTable.setModel(new javax.swing.table.DefaultTableModel(
                            tableData,
                            colNames
                    ));
                } else {
                    JOptionPane.showMessageDialog(null, "Opps!\nNo Products found for given code [" + searchText + "]");
                }
            } catch (Exception e) {
                System.out.print(e);
            }
        }
    }//GEN-LAST:event_searchJButtonActionPerformed

    private void AddProjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddProjButtonActionPerformed
        // TODO add your handling code here:
        if (checkProductFieldsNotEmpty()) {
            HashMap addnewbbStockMap = new HashMap<Integer, BBStockItem>();
            addnewbbStockMap.put(1, new BBStockItem(proCodeJTextField.getText(), proTitleJTextField.getText(),
                    productDescJTextArea.getText(), Integer.parseInt(proPriceJTextField.getText()),
                    Integer.parseInt(proQuantityJTextField.getText())));
            boolean isAdded = controller.addNewStock(addnewbbStockMap, bbStockMap, bbsi);
            if (isAdded) {
                JOptionPane.showMessageDialog(null, bbsi.getGuiDialogMessage());
                loadStockTable();
            }
        } else {
            JOptionPane.showMessageDialog(null, getErrorMsgStr());
        }

    }//GEN-LAST:event_AddProjButtonActionPerformed

    private void UpdateProJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateProJButtonActionPerformed
        // TODO add your handling code here:
        if (checkProductFieldsNotEmpty()) {
            HashMap addnewbbStockMap = new HashMap<Integer, BBStockItem>();
            addnewbbStockMap.put(1, new BBStockItem(proCodeJTextField.getText(), proTitleJTextField.getText(),
                    productDescJTextArea.getText(), Integer.parseInt(proPriceJTextField.getText()),
                    Integer.parseInt(proQuantityJTextField.getText())));
            boolean isUpdated = controller.updateStock(proCodeJTextField.getText(), addnewbbStockMap, bbStockMap, bbsi);
            if (isUpdated) {
                JOptionPane.showMessageDialog(null, bbsi.getGuiDialogMessage());
                 loadStockTable();
            }
        } else {
            JOptionPane.showMessageDialog(null, getErrorMsgStr());
        }

    }//GEN-LAST:event_UpdateProJButtonActionPerformed

    private void SellProJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellProJButtonActionPerformed
        // TODO add your handling code here:
        if (checkProductFieldsNotEmpty()) {
        String userQuantity=JOptionPane.showInputDialog(null,"Enter product sell quantity :"); 
        if(!userQuantity.isEmpty() && Integer.parseInt(userQuantity) != 0){
            if (checkProductFieldsNotEmpty()) {
                boolean isSold = controller.sellStock(proCodeJTextField.getText(), bbStockMap, Integer.parseInt(userQuantity),bbsi);
                if(isSold){
                    JOptionPane.showMessageDialog(null, bbsi.getGuiDialogMessage());
                 loadStockTable();
                }
            } else {
            JOptionPane.showMessageDialog(null, getErrorMsgStr());
        }
        }
        } else {
            JOptionPane.showMessageDialog(null, getErrorMsgStr());
        }
    }//GEN-LAST:event_SellProJButtonActionPerformed
    
    private void ClearJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearJButtonActionPerformed
        // TODO add your handling code here:
        proCodeJTextField.setText("");
        proTitleJTextField.setText("");
        productDescJTextArea.setText("");
        proPriceJTextField.setText("");
        proQuantityJTextField.setText("");
    }//GEN-LAST:event_ClearJButtonActionPerformed

    private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJButtonActionPerformed
        // TODO add your handling code here:
        if (checkProductFieldsNotEmpty()){
            boolean isDeleted = controller.deleteProduct(proCodeJTextField.getText(), bbStockMap, bbsi);
            if(isDeleted){
                JOptionPane.showMessageDialog(null, bbsi.getGuiDialogMessage());
                 loadStockTable();
            }
        }else {
            JOptionPane.showMessageDialog(null, getErrorMsgStr());
        }
    }//GEN-LAST:event_deleteJButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            // TODO add your handling code here:
            //Update the csv file with the new collection
            controller.updateStockCSV(bbStockMap, fp.getFileName());
        } catch (IOException ex) {
            Logger.getLogger(StockControllAppDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
        evt.getWindow().dispose();
        System.out.println("JFrame Closed!");

    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockControllAppDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockControllAppDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockControllAppDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockControllAppDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StockControllAppDashboard().setVisible(true);
            }

        });

    }

    //ShowGUI
    private void showGui() {
        System.out.println("--- StockControllAppDashboard showGui() Start------");
        
        String stockFileName = "./resource/barkers_boutique_stock_list_example.csv";

        fp.setFileName(stockFileName);

        //call the load method for BBStockMap
        try {
            bbStockMap = fp.loadFile(mmsi);
        } catch (IOException ex) {
            Logger.getLogger(StockControllAppDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
        bbsi.setBbStockMap(bbStockMap);
        System.out.println("Totall Items in the bbStockMap : " + bbsi.getBbStockMap().size());
        System.out.println("Totall Items in the MMStockMap : " + mmsi.getMmStockMap().size());
        loadStockTable(); //loads the Table
        controller.checkLowStockProducts(bbStockMap, bbsi);//checks for low stock items
        showLowStockReporting();
        System.out.println("--- StockControllAppDashboard showGui() End------");
    }

    //TODO: Implement later if need a common method to load the table
    public void loadStockTable() {
        System.out.println("--- StockControllAppDashboard loadStockTable() Start------");
        //Stock Table column Names
        
        
        bbStockMap = bbsi.getBbStockMap();
        mmStockMap = mmsi.getMmStockMap();
        int totalStockItems = bbStockMap.keySet().size() + mmStockMap.keySet().size();
        
        Object[][] tableData = new Object[bbStockMap.keySet().size()][colNames.length];
        int index = 0;
        try {
            for (Map.Entry< Integer, BBStockItem> entry : bbStockMap.entrySet()) {

                String prodCode = entry.getValue().getProdCode();

                tableData[index][0] = entry.getValue().getProdCode();
                tableData[index][1] = entry.getValue().getProdTitle();
                tableData[index][2] = entry.getValue().getProdDescription();
                tableData[index][3] = entry.getValue().getUnitPrice();
                tableData[index][4] = entry.getValue().getQuantity();
                index++;
            }
         
            StockTable.setModel(new javax.swing.table.DefaultTableModel(
                    tableData,
                    colNames
            ));

        } catch (Exception e) {
            System.out.print(e);
        }
        StockTable.setDefaultEditor(Object.class, null);
        System.out.println("--- StockControllAppDashboard loadStockTable() End------");
    }

    public void showLowStockReporting() {
        ArrayList<String> lowStockProductList = bbsi.getLowStockProductList();
        System.out.println("Low Stock Product List Size : " + lowStockProductList.size());
        //Show a dialog if there is lowstock items when the app opens
        if (!lowStockProductList.isEmpty()) {
            String listString = String.join("\n ", lowStockProductList);
            JOptionPane.showMessageDialog(jScrollPane3, listString);
        }
    }

    private boolean checkProductFieldsNotEmpty() {
        boolean isEmptyNotField = true;
        setErrorMsgStr("");
        String errorMsg = "";
        if (proCodeJTextField.getText().isEmpty()) {
            isEmptyNotField = false;
            errorMsg = errorMsg + "\nProduct Code requried*";
        } else if (proTitleJTextField.getText().isEmpty()) {
            isEmptyNotField = false;
            errorMsg = errorMsg + "\nProduct Title requried*";
        } else if (productDescJTextArea.getText().isEmpty()) {
            isEmptyNotField = false;
            errorMsg = errorMsg + "\nProduct Description requried*";
        } else if (proPriceJTextField.getText().isEmpty()) {
            isEmptyNotField = false;
            errorMsg = errorMsg + "\nProduct Unit Price requried*";
        } else if (proQuantityJTextField.getText().isEmpty()) {
            isEmptyNotField = false;
            errorMsg = errorMsg + "\nProduct Quantity requried*";
        } else {
            System.out.println("All fields for product details is filled");
        }
        setErrorMsgStr(errorMsg);
        return isEmptyNotField;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddProjButton;
    private javax.swing.JButton ClearJButton;
    private javax.swing.JButton SellProJButton;
    private javax.swing.JTable StockTable;
    private javax.swing.JButton UpdateProJButton;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField proCodeJTextField;
    private javax.swing.JTextField proPriceJTextField;
    private javax.swing.JTextField proQuantityJTextField;
    private javax.swing.JTextField proTitleJTextField;
    private javax.swing.JTextArea productDescJTextArea;
    private javax.swing.JButton resetJButton;
    private javax.swing.JButton searchJButton;
    private javax.swing.JTextField searchJTextField;
    // End of variables declaration//GEN-END:variables
}
